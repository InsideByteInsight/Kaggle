#load SQL package
library(sqldf)

#factorize training set
train_factor <- train
train_factor$weather <- factor(train$weather)
train_factor$holiday <- factor(train$holiday)
train_factor$workingday <- factor(train$workingday)
train_factor$season <- factor(train$season)

#factorize test set
test_factor <- test
test_factor$weather <- factor(test$weather)
test_factor$holiday <- factor(test$holiday)
test_factor$workingday <- factor(test$workingday)
test_factor$season <- factor(test$season)

#create time column by stripping out timestamp
train_factor$time <- substring(train$datetime,12,20)
test_factor$time <- substring(test$datetime,12,20)

#factorize new timestamp column
train_factor$time <- factor(train_factor$time)
test_factor$time <- factor(test_factor$time)

#create day of week column
train_factor$day <- weekdays(as.Date(train_factor$datetime))
train_factor$day <- as.factor(train_factor$day)
test_factor$day <- weekdays(as.Date(test_factor$datetime))
test_factor$day <- as.factor(test_factor$day)

#create Sunday variable
train_factor$sunday[train_factor$day == "Sunday"] <- "1"
train_factor$sunday[train_factor$day != "Sunday"] <- "0"

test_factor$sunday[test_factor$day == "Sunday"] <- "1"
test_factor$sunday[test_factor$day != "Sunday"] <- "0"

#convert to factor
train_factor$sunday <- as.factor(train_factor$sunday)
test_factor$sunday <- as.factor(test_factor$sunday)

#convert time and create $hour as integer to evaluate for daypart
train_factor$hour<- as.numeric(substr(train_factor$time,1,2))
test_factor$hour<- as.numeric(substr(test_factor$time,1,2))

#create daypart column, default to 4 to make things easier for ourselves
train_factor$daypart <- "4"
test_factor$daypart <- "4"


#4AM - 10AM = 1
train_factor$daypart[(train_factor$hour < 10) & (train_factor$hour > 3)] <- 1
test_factor$daypart[(test_factor$hour < 10) & (test_factor$hour > 3)] <- 1


#11AM - 3PM = 2
train_factor$daypart[(train_factor$hour < 16) & (train_factor$hour > 9)] <- 2
test_factor$daypart[(test_factor$hour < 16) & (test_factor$hour > 9)] <- 2


#4PM - 9PM = 3
train_factor$daypart[(train_factor$hour < 22) & (train_factor$hour > 15)] <- 3
test_factor$daypart[(test_factor$hour < 22) & (test_factor$hour > 15)] <- 3

#convert daypart to factor
train_factor$daypart <- as.factor(train_factor$daypart)
test_factor$daypart <- as.factor(test_factor$daypart)

#convert hour back to factor
train_factor$hour <- as.factor(train_factor$hour)
test_factor$hour <- as.factor(test_factor$hour)

#first start with some simple slice and dice
#e.g. split in 36 categories using the categorical variables and compute average count
#of bycicles per category

#make summary (average counts per season)
SQLsummary1 <- sqldf("select season, sum(count)/count(datetime) from train_factor group by season")

#make second summary --> give average per unique season, holiday, workingday, weather combination
SQLsummary2 <- sqldf(paste("select season, holiday, workingday, weather, sum(count)/count(datetime)", 
                           "from train_factor group by season, holiday, workingday, weather"))

SQLsummary2$cat <- paste(SQLsummary2$season,SQLsummary2$holiday,
                         SQLsummary2$workingday,SQLsummary2$weather)

test_factor$cat <- paste(test_factor$season,test_factor$holiday,
                         test_factor$workingday,test_factor$weather)

#join SQLsummary and test to make predictions based on category only
temp <- sqldf("select test_factor.*, SQLsummary2.* from test_factor left join SQLsummary2 on test_factor.cat = SQLsummary2.cat")

#first submission
names(temp)[names(temp)=="sum(count)/count(datetime)"] <- "avCount"
submit.categories <- data.frame(datetime = temp$datetime, count = temp$avCount)  
